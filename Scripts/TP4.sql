SET SERVEROUTPUT ON;

/* Question 1 */
DECLARE
CURSOR Lits IS SELECT CODE_SERVICE, NUM_CHAMBRE, NB_LITS FROM CHAMBRE;
Ligne Lits%ROWTYPE;
occupe BINARY_INTEGER;
total BINARY_INTEGER;
nom_service SERVICE.NOM_SERVICE%TYPE;
BEGIN
FOR Ligne IN Lits LOOP
	total := Ligne.NB_LITS;
	SELECT COUNT(*) INTO occupe FROM HOSPITALISATION WHERE CODE_SERVICE = Ligne.CODE_SERVICE AND NUM_CHAMBRE = Ligne.NUM_CHAMBRE;
	SELECT NOM_SERVICE INTO nom_service FROM SERVICE WHERE CODE_SERVICE = Ligne.CODE_SERVICE;
	DBMS_OUTPUT.PUT_LINE('La chambre N'||Ligne.NUM_CHAMBRE||' de service '||nom_service||' possède '||occupe||' lit(s) occupé(s) et '||TO_CHAR(total-occupe)||' lit(s) libre(s)');
END LOOP;
END;
/

/* Question 2 */
ALTER TABLE INFIRMIER DISABLE CONSTRAINT CHK_SALAIRE;
SELECT NOM_EMP, PRENOM_EMP, SALAIRE FROM INFIRMIER INNER JOIN EMPLOYE ON NUM_INF = NUM_EMP;
CREATE OR REPLACE PROCEDURE augmenter_salaire AS
BEGIN
	UPDATE INFIRMIER SET SALAIRE = SALAIRE + SALAIRE * 50 / 100 WHERE ROTATION = 'JOUR';
	UPDATE INFIRMIER SET SALAIRE = SALAIRE + SALAIRE * 60 / 100 WHERE ROTATION = 'NUIT';
	COMMIT;
END;
/
EXECUTE augmenter_salaire;
SELECT NOM_EMP, PRENOM_EMP, SALAIRE FROM INFIRMIER INNER JOIN EMPLOYE ON NUM_INF = NUM_EMP;

/* Question 3 */
CREATE OR REPLACE PROCEDURE Verification(Salaire INFIRMIER.SALAIRE%TYPE) AS
BEGIN
	IF Salaire BETWEEN 10000 AND 30000 THEN DBMS_OUTPUT.PUT_LINE('Vérification  positive');
	ELSE DBMS_OUTPUT.PUT_LINE('Vérification  négative');
	END IF;
END;
/

DECLARE
CURSOR Infirmiers IS SELECT NOM_EMP, PRENOM_EMP, SALAIRE FROM INFIRMIER INNER JOIN EMPLOYE ON NUM_INF = NUM_EMP;
BEGIN
	FOR inf IN Infirmiers LOOP
		DBMS_OUTPUT.PUT(inf.NOM_EMP||' '||inf.PRENOM_EMP||' '||inf.SALAIRE||' ');
		Verification(inf.SALAIRE);
	END LOOP;
END;
/

/* Question 4 */
CREATE OR REPLACE FUNCTION SpecialiteNombre(Spec MEDECIN.SPECIALITE%TYPE) RETURN NUMBER IS
nombre NUMBER;
BEGIN
	SELECT COUNT(*) INTO nombre FROM MEDECIN WHERE SPECIALITE = Spec;
	RETURN nombre;
END;
/

DECLARE
CURSOR Specialites IS SELECT DISTINCT SPECIALITE FROM MEDECIN;
BEGIN
	FOR spec IN Specialites LOOP
		DBMS_OUTPUT.PUT_LINE(spec.SPECIALITE||' '||TO_CHAR(SpecialiteNombre(spec.SPECIALITE)));
	END LOOP;
END;
/

/* Question 5 */
CREATE OR REPLACE PROCEDURE Ajouter_infirmier(numero EMPLOYE.NUM_EMP%TYPE,
nom EMPLOYE.NOM_EMP%TYPE, prenom EMPLOYE.PRENOM_EMP%TYPE, adresse EMPLOYE.ADRESSE_EMP%TYPE,
tel EMPLOYE.TEL_EMP%TYPE, serv INFIRMIER.CODE_SERVICE%TYPE, rot INFIRMIER.ROTATION%TYPE,
sal INFIRMIER.SALAIRE%TYPE) AS
service_inexistant EXCEPTION;
rotation_inexistante EXCEPTION;
salaire_incorrecte EXCEPTION;
service_trouve BOOLEAN;
CURSOR s IS SELECT CODE_SERVICE FROM SERVICE;
BEGIN
	INSERT INTO EMPLOYE VALUES(numero, nom, prenom, adresse, tel);
	service_trouve := FALSE;
	FOR ligne IN s LOOP
		IF ligne.CODE_SERVICE = serv THEN service_trouve := TRUE;
		END IF;
	END LOOP;
	IF NOT service_trouve THEN RAISE service_inexistant;
	ELSIF rot NOT IN ('JOUR', 'NUIT') THEN RAISE rotation_inexistante;
	ELSIF sal NOT BETWEEN 10000 AND 30000 THEN RAISE salaire_incorrecte;
	END IF;
	INSERT INTO INFIRMIER VALUES(numero, serv, rot, sal);
	COMMIT;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN DBMS_OUTPUT.PUT_LINE('Erreur : Un employe du même numéro existe déja !');
WHEN service_inexistant THEN DBMS_OUTPUT.PUT_LINE('Erreur : Le service spécifié n''existe pas !'); ROLLBACK;
WHEN rotation_inexistante THEN DBMS_OUTPUT.PUT_LINE('Erreur : La rotation spécifiée n''existe pas !'); ROLLBACK;
WHEN salaire_incorrecte THEN DBMS_OUTPUT.PUT_LINE('Erreur : Le salaire doit être entre 10000 et 30000 !'); ROLLBACK;
END;
/
EXECUTE Ajouter_infirmier(250, 'Nom', 'Prénom', 'Adresse', '2531490041', 'REA', 'JOUR', 17500);
